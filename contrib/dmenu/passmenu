#!/usr/bin/env bash

shopt -s nullglob globstar failglob
set -euo pipefail

arg1=${1:-} 
arg2=${2:-} 
typeit=0
notifyit=0

[[ '--type' == "$arg1" ]] || [[ '--type' == "$arg2" ]] &&
typeit=1 &&
shift

[[ '--notify' == "$arg1" ]] || [[ '--notify' == "$arg2" ]] &&
notifyit=1 &&
shift

X_SELECTION=${PASSWORD_STORE_X_SELECTION:-clipboard}
CLIP_TIME=${PASSWORD_STORE_CLIP_TIME:-45}
prefix=${PASSWORD_STORE_DIR:-$HOME/.password-store}

password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )
password=''
cleanup=''
before=''
userID=$(id -u "$(whoami)")

_finish () {
  [[ True == "$cleanup" ]] &&
  printf %s "$before" | base64 -d | xclip -sel "$X_SELECTION" -i &&
  if compgen -G "/tmp/passmenu.$userID*" >/dev/null 2>&1 ;then
    rmdir /tmp/passmenu.*.*."$$".lock >/dev/null 2>&1
  fi
  exit
}

_notify () {
  message=$1
  [[ "$notifyit" == 1 ]] && 
  notify-send "$message" --icon=dialog-information || 
  printf '%s\n' "$message"
}

( [[ "$notifyit" == 1 ]] & hash notify-send 2>/dev/null || 
  { printf '%s\n' "e: cannot find libnotify."; exit 1; }
[[ "$typeit" == 1 ]] & hash xdotool 2>/dev/null || 
  { _notify "e: cannot find xdotool."; exit 1; } )


## dmenu exits on KeyPress not KeyRelease.
# It might be nice to send KeyRelease event to some dummy window.
# psydocode: xdotool getwindowfocus; create dummy window;
# exec dmenu; close dummy window; restore focus.
for password in $(printf '%s\n' "${password_files[@]}" | dmenu -f "$@"); do
  passel+=("$password")
done

# Runs the _finish funtion on exit. 
trap _finish EXIT

[[ -n $password ]] || exit

## Clearing old filelock(s). 
umask 077
stalelock=${stalelock:-''}
stalelock=$(find '/tmp' -maxdepth 1 -name "passmenu.$userID.*" -user "$(whoami)" -print0  -quit -type d) &&
if test -n "$stalelock" ;then
  stalename=${stalelock%.*}
  report=$(ps -u "$(id -u "$(whoami)")" aux | grep "bash" | grep "passmenu" | grep -v "$$")
  stalePID=$(printf %s "$stalename" | 
  sed -e "s/\/tmp\/passmenu\.[0-9]\{1,6\}\?\..*\.//g")
  if [[ "$report" == *"$stalePID"* ]] ;then
    kill "$(ps -o pid= --ppid "$stalePID" )" || exit 1
  else
    rmdir /tmp/passmenu."$userID".* >/dev/null 2>&1 ||
    { _notify ":: Unable to clear old filelock"; exit 1; }
  fi
fi

## Adding a new filelock
( mktemp -d "/tmp/passmenu.$userID.XXXXXXXXXX.$$.lock" >/dev/null 2>&1 ||
  { _notify ":: Unable to make filelock."; exit 1; } ) &&
  cleanup=True

# It would be nice to first test if string exists.
before=$(xclip -sel "$X_SELECTION" -o 2>/dev/null | base64) || true
cleanup=True

if [[ $typeit -eq 0 ]]; then
  ## CLIPBOARD
  if [[ ${#passel[@]} -gt "1" ]]; then
    round=0
    for entry in "${passel[@]}"; do
      pass show "$entry" | sed '1!d' | tr -d '\n' |
      xclip -l 1 -quiet -sel "$X_SELECTION" >/dev/null 2>&1
      _notify "Sent ${passel[$round]} via $X_SELECTION"
      round=$((round + 1))
    done
  else
    pass show "$password" | sed '1!d' | tr -d '\n' |
    xclip -sel "$X_SELECTION" -i
    _notify "Sent $password via $X_SELECTION"
    sleep "$CLIP_TIME"
  fi
else
  ## TYPE
  if [[ ${#passel[@]} -gt "1" ]]; then
    round=0
    for entry in "${passel[@]}"; do
      printf '' | xclip -l 1 -quiet -sel "$X_SELECTION" >/dev/null 2>&1
      pass show "$entry" | sed '1!d' | tr -d '\n' | 
      xdotool type --delay --clearmodifiers --file -
      _notify "Sent ${passel[$round]} via 'xdotool'"
      round=$((round + 1))
    done
  else
    pass show "$password" | sed '1!d' | tr -d '\n' |
    xdotool type --delay --clearmodifiers --file -
    _notify "Sent $password via 'xdotool'"
  fi
fi
exit
