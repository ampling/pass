#!/usr/bin/env bash

##
## A dynamic pass menu.
##
## [Ampling] [2016-2017]
##

## DEPENDENCIES; dmenu, pass
## (optional)     libnotify, xdotool

shopt -s nullglob globstar failglob
set -euo pipefail

## SETTINGS
X_SELECTION=${PASSWORD_STORE_X_SELECTION:-clipboard}
prefix=${PASSWORD_STORE_DIR:-$HOME/.password-store}
version=passmenu-0.2.6

arg1=${1:-} 
arg2=${2:-} 
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )
selection=''
cleanup=''
before=''
myname=${0##*/}
userID=$(id -u "$(whoami)")
usage="$myname [-h help] [-k kill] [-v version] [-c clip] [<dmenu []>]"


## Try libnotify first.
{ hash notify-send &>/dev/null && notifyit=1; } || 
{ printf '%s\n' "w: libnotify not found" && notifyit=0; }


_notify () {
  message=$1
  [[ "$notifyit" == 1 ]] && 
  notify-send "$message" --icon=dialog-password || printf '%s\n' "$message"
  printf '%s\n' "$message"
}

_clear () {
  ## Removes old filelock(s). 
  umask 077
  stalelock=${stalelock:-''}
  stalelock=$(find /tmp -maxdepth 1 -name "$myname.$userID.*" -user "$(whoami)" -print -quit -type d) &&
  if [[ -n "$stalelock" ]]; then
    stalename=${stalelock%.*}
    report=$(pgrep -fa "$myname" | grep bash | sed 's/\s.*$//')
    stalePID=$(printf '%s' "$stalename" | sed -e "s/\/tmp\/$myname\.[0-9]\{1,6\}\?\..*\.//g")
    parentID=$(ps -o pid= --ppid "$stalePID" )
    if [[ $report == *"$stalePID"* ]]; then
      kill "$parentID" &>/dev/null || exit 1
    else
      rmdir /tmp/passmenu."$userID".* &>/dev/null ||
      { _notify ":: Unable to clear old filelock"; exit 1; }
    fi
  fi
}

_finish () {
  [[ True == "$cleanup" ]] &&
  printf '%s' "$before" | base64 -d | xclip -sel "$X_SELECTION" -i &>/dev/null &&
  compgen -G /tmp/"$myname.$userID*" &>/dev/null &&
  rmdir /tmp/passmenu.*.*."$$".lock &>/dev/null
  exit
}


hash xclip || _notify "w: xclip not found." 
{ hash xdotool &>/dev/null && clipit=0; } || 
{ _notify "w: xdotool not found."; clipit=0; } 

[[ $arg1 == *v* || $arg2 == *v* ]] && { _notify "$version" && exit; }
[[ $arg1 == *h* || $arg2 == *h* ]] && { printf '%s\n' "$usage" && exit; }
[[ $arg1 == *c* || $arg2 == *c* ]] && { clipit=1 && shift; }
[[ $arg1 == *no* || $arg2 == *no* ]] && { notifyit=1 && shift; }
[[ $arg1 == *k* || $arg2 == *k* ]] &&
{ printf '%s\n' "clean and exit..."; _clear; exit; }
[[ ! -e "$prefix" ]] && { _notify "e: $prefix not found." && exit; }

# Runs the _finish funtion on exit. 
trap _finish EXIT

## dmenu exits on KeyPress not KeyRelease.
## It might be nice to send KeyRelease event to some dummy window.
for selection in $(printf '%s\n' "${password_files[@]}" | dmenu -f "$@"); do
  passel+=("$selection")
done


_clear; [[ -n $selection ]] || exit

## Add a new filelock
( mktemp -d "/tmp/passmenu.$userID.XXXXXXXXXX.$$.lock" &>/dev/null ||
{ _notify ":: Unable to make filelock."; exit 1; } ) &&
cleanup=True

# It would be nice to first test if string exists.
before=$(xclip -sel "$X_SELECTION" -o | base64) || true
cleanup=True

round=0
if [[ $clipit -eq 0 ]]; then
  for entry in "${passel[@]}"; do
    ## AUTOTYPE
    {
    printf '' | xclip -l 1 -quiet -sel "$X_SELECTION" &>/dev/null
    pass show "$entry" | sed '1!d' | tr -d '\n' |
    xdotool type --delay --clearmodifiers --file -
    }
    _notify "${passel[$round]} sent via autotype"
    round=$((round + 1))
  done
else
  for entry in "${passel[@]}"; do
    ## CLIPBOARD
    {
    pass show "$entry" | sed '1!d' | tr -d '\n' |
    xclip -l 1 -quiet -sel "$X_SELECTION" &>/dev/null
    }
    _notify "${passel[$round]} sent via $X_SELECTION"
    round=$((round + 1))
  done
fi
exit
